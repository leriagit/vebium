import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, CallbackContext
from telegram.ext import filters
import asyncio
import sqlite3

def init_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            name TEXT,
            is_admin INTEGER
        )
    ''')
    conn.commit()
    conn.close()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
REGISTER, NAME, MAIN_MENU, UPLOAD_ASSIGNMENT, UPLOAD_THEORY, SEND_REMINDER, SEND_VIDEO = range(7)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
students = {}
admins = ['vcshss']  # –ù–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    students[user.id] = {"nickname": "", "name": ""}

    if user.username in admins:
        students[user.id]["is_admin"] = True
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:")
    else:
        students[user.id]["is_admin"] = False
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫:")

    return REGISTER


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∏–∫–∞
async def register_nickname(update: Update, context: CallbackContext):
    user = update.message.from_user
    students[user.id]["nickname"] = update.message.text
    await update.message.reply_text(f"–í–∞—à –Ω–∏–∫: {update.message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ –ø–æ–∫–∞–∑ –º–µ–Ω—é
async def register_name(update: Update, context: CallbackContext):
    user = update.message.from_user
    students[user.id]["name"] = update.message.text
    await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    if students[user.id]["is_admin"]:
        await main_menu_admin(update)
    else:
        await main_menu_student(update)

    return MAIN_MENU

def add_user(user_id, username, name, is_admin=False):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (id, username, name, is_admin) VALUES (?, ?, ?, ?)",
                       (user_id, username, name, int(is_admin)))
        conn.commit()
    except sqlite3.IntegrityError:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")
    finally:
        conn.close()

def is_user_registered(user_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None

def get_students():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE is_admin=0")
    students = [row[0] for row in cursor.fetchall()]
    conn.close()
    return students

def is_admin(user_id):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None and result[0] == 1

# –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ReplyKeyboardMarkup)
async def main_menu_admin(update: Update):
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–∑–≤–æ–Ω–µ"), KeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å–æ–∑–≤–æ–Ω–∞")],
    ], resize_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∞
async def handle_admin_choice(update: Update, context: CallbackContext):
    text = update.message.text

    if text == "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–∑–≤–æ–Ω–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return SEND_REMINDER  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    elif text == "üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å–æ–∑–≤–æ–Ω–∞":
        return await send_video(update, context)

    return MAIN_MENU



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_reminder(update: Update, context: CallbackContext):
    reminder_text = update.message.text

    # –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º
    for student_id, student_data in students.items():
        if not student_data["is_admin"]:  # –¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º
            await context.bot.send_message(student_id, text=f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")

    await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º.")
    return MAIN_MENU

# –ú–µ–Ω—é –¥–ª—è —É—á–µ–Ω–∏–∫–∞ (ReplyKeyboardMarkup)
async def main_menu_student(update: Update):
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìù –†–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìö –†–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–æ—Ä–∏—é")],
    ], resize_keyboard=True)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
async def handle_student_choice(update: Update, context: CallbackContext):
    text = update.message.text

    if text == "üìù –†–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        return UPLOAD_ASSIGNMENT
    elif text == "üìö –†–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–æ—Ä–∏—é":
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –ø–æ —Ç–µ–æ—Ä–∏–∏.")
        return UPLOAD_THEORY


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏—è
async def upload_assignment(update: Update, context: CallbackContext):
    user = update.message.from_user
    if update.message.photo:
        photo = update.message.photo[-1].file_id
        context.user_data['photo'] = photo
        context.user_data['description'] = update.message.caption or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
        await update.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—É—Ä–∞—Ç–æ—Ä—É.")

        for student_id in students:
            if students[student_id]["is_admin"]:
                await context.bot.send_photo(
                    student_id,
                    photo=photo,
                    caption=f"–ó–∞–¥–∞–Ω–∏–µ –æ—Ç {students[user.id]['name']} ({students[user.id]['nickname']}):\n{context.user_data['description']}"
                )
    else:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–¥–∞–Ω–∏—è.")

    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–æ—Ä–∏–∏
async def upload_theory(update: Update, context: CallbackContext):
    user = update.message.from_user
    context.user_data['theory_question'] = update.message.text
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–æ—Ä–∏–∏ –ø—Ä–∏–Ω—è—Ç.")

    for student_id in students:
        if students[student_id]["is_admin"]:
            await context.bot.send_message(
                student_id,
                f"–í–æ–ø—Ä–æ—Å –æ—Ç {students[user.id]['name']} ({students[user.id]['nickname']}):\n{context.user_data['theory_question']}"
            )

    return MAIN_MENU


# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–∑–≤–æ–Ω–µ
async def send_reminder(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    return SEND_REMINDER


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_reminder(update: Update, context: CallbackContext):
    reminder_text = update.message.text
    for student_id in students:
        if not students[student_id]["is_admin"]:
            await context.bot.send_message(student_id, text=reminder_text)

    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    return MAIN_MENU


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å–æ–∑–≤–æ–Ω–∞
async def send_video(update: Update, context: CallbackContext):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å–æ–∑–≤–æ–Ω–∞.")
    return SEND_VIDEO


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: CallbackContext):
    video = update.message.video
    context.user_data['video_file'] = video.file_id
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏.")
    return SEND_VIDEO


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
async def handle_video_name(update: Update, context: CallbackContext):
    video_name = update.message.text
    for student_id in students:
        if not students[student_id]["is_admin"]:
            await context.bot.send_video(student_id, video=context.user_data['video_file'], caption=f"–ó–∞–ø–∏—Å—å —Å–æ–∑–≤–æ–Ω–∞: {video_name}")

    await update.message.reply_text("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    return MAIN_MENU


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def done(update: Update, context: CallbackContext):
    return MAIN_MENU


async def main():
    application = Application.builder().token("7722855093:AAGCMwpeNhtcuMp9ra_b1PsRGeTjmPl6wRA").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_nickname)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_name)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_student_choice)],
            UPLOAD_ASSIGNMENT: [MessageHandler(filters.PHOTO & filters.CAPTION, upload_assignment)],
            UPLOAD_THEORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, upload_theory)],
            SEND_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reminder)],  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç—É—Ç!
            SEND_VIDEO: [
                MessageHandler(filters.VIDEO, handle_video),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_name)
            ],
        },
        fallbacks=[CommandHandler('done', done)],
    )

    application.add_handler(conv_handler)
    await application.run_polling()


if __name__ == '__main__':
    import nest_asyncio

    nest_asyncio.apply()
    asyncio.run(main())